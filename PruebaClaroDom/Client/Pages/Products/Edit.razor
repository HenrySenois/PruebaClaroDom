@page "/edit-product/{productId:int}"
@inject IShowMessages showMessages
@inject NavigationManager navigationManager
@inject IHttpClientRepository Http
@inject IJSRuntime js

<h1>Editar Producto</h1>
<br />
<br />
<br />

<EditForm Model="@Product">
    <div class="row">
        <div class="col-md-3">
        </div>
        <div class="col-md-6">
            <label><b>Codigo:</b></label>
            <label>@Product.Code</label><br />
            <div class="form-group">
                <label><b>Nombre:</b></label>
                <div>
                    <InputText required class="form-control" @bind-Value="@Product.Name" />
                </div>
            </div>
            <div class="form-group">
                <label><b>Descripcion:</b></label>
                <div>
                    <InputTextArea required class="form-control" @bind-Value="@Product.Description" />
                </div>
            </div>
            <div class="form-group">
                <label><b>Fecha Expiracion:</b></label>
                <div>
                    <InputDate required class="form-control" @bind-Value="@Product.ExpiredDate" />
                </div>
            </div>
            <div class="form-group">
                <label><b>Precios:</b></label>
                <div>
                   @foreach (var price in Products.Prices)
                   {

                   }
                </div>
            </div>
        </div>
        <div class="col-md-3">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-3">
        </div>
        <div class="col-md-6">
            <center>
                <button type="submit" class="btn btn-primary" @onclick="UpdateProduct">
                    Guardar
                </button>
            </center>
        </div>
        <div class="col-md-3">
        </div>
    </div>
    <br />
    <br />
    <br />
</EditForm>

@code {
    Products Product = new Products();
    [Parameter] public int productId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await Http.Get<ResultQueueDTO>($"api/Products/GetById/{productId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/products");
            }
            else
            {
                await showMessages.ShowErrorMessage(await responseHttp.GetBody());
            }
        }
        else
        {
            Product = responseHttp.Response;
        }
    }

    async Task UpdateProduct()
    {

        if (await js.Confirm("Confirmacion de operacion", "Desea editar este producto?", TypeMessageSweetAlert.question))
        {
            var responseHttp = await Http.Put("api/products/Update/", product);
            if (responseHttp.Error)
            {
                await showMessages.ShowErrorMessage(await responseHttp.GetBody());
            }
            else
            {
                navigationManager.NavigateTo("products");
            }
        }
    }
}

